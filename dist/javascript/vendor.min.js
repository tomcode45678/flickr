'use strict';

System.register('javascript/api', [], function (_export, _context) {
  var _createClass, loadingSpinner, API;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  return {
    setters: [],
    execute: function () {
      _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      loadingSpinner = document.querySelector('[data-loading-spinner]');

      API = function () {
        function API(url, callback, dataHandler) {
          _classCallCheck(this, API);

          this.setHandler(callback, dataHandler);
          this.loadUrl(url);
        }

        _createClass(API, [{
          key: 'setHandler',
          value: function setHandler(callback, dataHandler) {
            window[callback] = function (data) {
              new dataHandler(data);
              loadingSpinner.classList.remove('spinner--show');
            };
          }
        }, {
          key: 'loadUrl',
          value: function loadUrl(url) {
            var script = document.createElement('script');
            script.src = url;

            script.onerror = function () {
              var sorryMessage = document.createElement('div');
              var sorry = document.createTextNode('\n        We\'re sorry, we could not retrieve any images from Flickr.\n        This is most likely connectivity issues, please make sure you are still connected to the internet.\n      ');

              sorryMessage.appendChild(sorry);
              document.body.appendChild(sorryMessage);
              loadingSpinner.classList.remove('spinner--show');
            };

            document.body.appendChild(script);
          }
        }]);

        return API;
      }();

      _export('default', API);
    }
  };
});
'use strict';

System.register('javascript/display-images', [], function (_export, _context) {
  var _createClass, SAVED, DisplayImages;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  return {
    setters: [],
    execute: function () {
      _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      SAVED = 'saved';

      DisplayImages = function () {
        function DisplayImages(data) {
          _classCallCheck(this, DisplayImages);

          this.images = data.items;
          this.imageContainer = document.querySelector('[data-image-container]');
          this.savedImages = JSON.parse(localStorage.getItem('savedImages')) || [];

          if (this.imageContainer) {
            this.renderAssets(data.items);
            this.bindEvents();
          }
        }

        _createClass(DisplayImages, [{
          key: 'renderAssets',
          value: function renderAssets(assets) {
            var imageFragments = document.createDocumentFragment();

            for (var i = 0, assetsLength = assets.length; i < assetsLength; i++) {
              var asset = assets[i];
              imageFragments.appendChild(this.renderAsset(asset));
            }
            this.imageContainer.appendChild(imageFragments);
          }
        }, {
          key: 'renderAsset',
          value: function renderAsset(asset) {
            var imageCardClass = 'mdl-cell mdl-cell--3-col mdl-card mdl-shadow--2dp';
            var imageCard = document.createElement('article');

            var desc = document.createElement('div');
            desc.innerHTML = asset.description;
            var image = desc.querySelector('img');

            if (this.savedImage(image)) {
              imageCardClass = imageCardClass + ' ' + SAVED;
            }
            imageCard.className = imageCardClass;

            var imageCardActions = document.createElement('div');
            imageCardActions.className = 'mdl-card__actions';

            var imageCardTitle = document.createElement('div');
            imageCardTitle.className = 'card-image card-image__title';

            var imageTitle = document.createTextNode(asset.title);
            imageCardTitle.appendChild(imageTitle);

            var imageCardSaved = document.createElement('div');
            imageCardSaved.className = 'card-image card-image__saved';

            imageCardSaved.innerHTML = '&#x2665;';

            imageCardActions.appendChild(imageCardTitle);
            imageCardActions.appendChild(imageCardSaved);

            imageCard.appendChild(image);
            imageCard.appendChild(imageCardActions);
            return imageCard;
          }
        }, {
          key: 'bindEvents',
          value: function bindEvents() {
            this.imageContainer.addEventListener('click', this.selectedHandler.bind(this));
          }
        }, {
          key: 'selectedHandler',
          value: function selectedHandler(e) {
            var target = e.target;

            if (target.nodeName !== "ARTICLE") {
              target = target.parentNode;
              if (target.className === 'mdl-card__actions') {
                target = target.parentNode;
              }
            }

            target.classList.toggle(SAVED);
            this.toggleSavedImage(target, target.querySelector('img'));
          }
        }, {
          key: 'toggleSavedImage',
          value: function toggleSavedImage(imageCard, selectedImage) {
            if (imageCard.classList.contains(SAVED)) {
              this.savedImages.push(selectedImage.src);
            } else {
              this.removeSavedImage(selectedImage.src);
            }
            this.setSavedImages();
          }
        }, {
          key: 'removeSavedImage',
          value: function removeSavedImage(selectedImage) {
            for (var i = 0; i < this.savedImages.length; i++) {
              var image = this.savedImages[i];
              if (selectedImage === image) {
                this.savedImages.splice(i, 1);
              }
            }
          }
        }, {
          key: 'setSavedImages',
          value: function setSavedImages() {
            localStorage.removeItem('savedImages');
            localStorage.setItem('savedImages', JSON.stringify(this.savedImages));
          }
        }, {
          key: 'savedImage',
          value: function savedImage(image) {
            var result = false;

            for (var i = 0; i < this.savedImages.length; i++) {
              var savedImage = this.savedImages[i];
              if (image.src === savedImage) {
                result = true;
                break;
              }
            }
            return result;
          }
        }]);

        return DisplayImages;
      }();

      _export('default', DisplayImages);
    }
  };
});
'use strict';

System.register('javascript/main', ['./api', './display-images'], function (_export, _context) {
  var API, DisplayImages, TAGS, callback, URL_PATH;
  return {
    setters: [function (_api) {
      API = _api.default;
    }, function (_displayImages) {
      DisplayImages = _displayImages.default;
    }],
    execute: function () {
      TAGS = 'landscape';
      callback = 'dataHandler';
      URL_PATH = 'http://api.flickr.com/services/feeds/photos_public.gne?format=json&jsoncallback=' + callback + '&tags=' + TAGS;


      new API(URL_PATH, callback, DisplayImages);
    }
  };
});
//# sourceMappingURL=vendor.min.js.map
