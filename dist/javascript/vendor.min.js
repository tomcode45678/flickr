'use strict';

System.register('javascript/api', [], function (_export, _context) {
  var _createClass, loadingSpinner, requestComplete, API;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  return {
    setters: [],
    execute: function () {
      _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      loadingSpinner = document.querySelector('[data-loading-spinner]');

      requestComplete = function requestComplete() {
        return loadingSpinner.classList.remove('spinner--show');
      };

      API = function () {
        function API(url, dataHandler, clearContent) {
          _classCallCheck(this, API);

          this.loadUrl(url, dataHandler, clearContent);
          this.requestComplete = requestComplete;
        }

        _createClass(API, [{
          key: 'clearUI',
          value: function clearUI(clearContent) {
            loadingSpinner.classList.add("spinner--show");
            if (clearContent) {
              clearContent.innerHTML = '';
            }
          }
        }, {
          key: 'error',
          value: function error() {
            var sorryMessage = document.createElement('div');
            var sorry = document.createTextNode('\n      We\'re sorry, we could not retrieve any images from Flickr.\n      This is most likely connectivity issues, please make sure you are still connected to the internet.\n    ');

            sorryMessage.appendChild(sorry);
            document.body.appendChild(sorryMessage);
            requestComplete();
          }
        }, {
          key: 'loadUrl',
          value: function loadUrl(url, dataHandler, clearContent) {
            var _this = this;

            var call = new XMLHttpRequest();
            call.open("GET", url, true);
            call.onload = function () {
              if (call.readyState === 4) {
                if (call.status === 200) {
                  dataHandler(JSON.parse(call.responseText));
                  requestComplete();
                } else {
                  _this.error();
                }
              }
            };

            call.onerror = this.error;
            call.send(null);

            this.clearUI(clearContent);
          }
        }]);

        return API;
      }();

      _export('default', API);
    }
  };
});
'use strict';

System.register('javascript/display-images', [], function (_export, _context) {
  var _typeof, _createClass, SAVED, NEXT_BTN, DisplayImages;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  return {
    setters: [],
    execute: function () {
      _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
      };

      _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      SAVED = 'saved';
      NEXT_BTN = 'next-page';

      DisplayImages = function () {
        function DisplayImages(imageContainer, CONFIG) {
          _classCallCheck(this, DisplayImages);

          this.imageContainer = imageContainer;
          this.savedImages = JSON.parse(localStorage.getItem('savedImages')) || [];
          this.config = CONFIG;

          if (imageContainer) {
            this.bindEvents(imageContainer);
          }
        }

        _createClass(DisplayImages, [{
          key: 'render',
          value: function render(data) {
            var photo = data.photos.photo;
            if (photo.length) {
              this.renderAssets(photo);
            } else {
              var sorryMessage = document.createElement('div');
              var sorry = document.createTextNode('\n        We\'re sorry, we could not retrieve any images from Flickr matching your search.\n      ');

              sorryMessage.appendChild(sorry);
              this.imageContainer.appendChild(sorryMessage);
            }
          }
        }, {
          key: 'renderSaved',
          value: function renderSaved(callback) {
            this.renderAssets(this.savedImages);
            callback();
          }
        }, {
          key: 'renderAssets',
          value: function renderAssets(assets) {
            var imageFragments = document.createDocumentFragment();
            for (var i = 0, assetsLength = assets.length; i < assetsLength; i++) {
              var asset = assets[i];
              imageFragments.appendChild(this.renderAsset(asset));
            }
            this.imageContainer.innerHTML = '';
            this.imageContainer.appendChild(imageFragments);

            var nextButton = document.createElement('button');
            nextButton.id = NEXT_BTN;
            nextButton.className = 'mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect';
            nextButton.textContent = 'Next';
            this.imageContainer.appendChild(nextButton);
          }
        }, {
          key: 'renderAsset',
          value: function renderAsset(asset) {
            var imageCardClass = 'mdl-cell mdl-cell--3-col mdl-cell--4-col-tablet mdl-cell--8-col-phone mdl-card mdl-shadow--2dp';
            var imageCard = document.createElement('article');
            var imageSrc = asset;
            var image = document.createElement('img');

            if ((typeof asset === 'undefined' ? 'undefined' : _typeof(asset)) === 'object') {
              var FARM = asset.farm;
              var SERVER = asset.server;
              var ID = asset.id;
              var SECRET = asset.secret;
              imageSrc = 'https://farm' + FARM + '.staticflickr.com/' + SERVER + '/' + ID + '_' + SECRET + '_c.jpg';
            }

            image.src = imageSrc;

            if (this.savedImage(imageSrc)) {
              imageCardClass = imageCardClass + ' ' + SAVED;
            }
            imageCard.className = imageCardClass;

            var imageCardActions = document.createElement('div');
            imageCardActions.className = 'mdl-card__actions';

            var imageCardTitle = document.createElement('div');
            imageCardTitle.className = 'card-image card-image__title';

            if (asset.title) {
              var imageTitle = document.createTextNode(asset.title);
              imageCardTitle.appendChild(imageTitle);
            }

            var imageCardSaved = document.createElement('div');
            imageCardSaved.className = 'card-image card-image__saved';

            imageCardSaved.innerHTML = '&#x2665;';

            imageCardActions.appendChild(imageCardTitle);
            imageCardActions.appendChild(imageCardSaved);

            imageCard.appendChild(image);
            imageCard.appendChild(imageCardActions);
            return imageCard;
          }
        }, {
          key: 'bindEvents',
          value: function bindEvents(imageContainer) {
            var _this = this;

            imageContainer.addEventListener('click', function (e) {
              return _this.selectedHandler(e);
            });
          }
        }, {
          key: 'selectedHandler',
          value: function selectedHandler(e) {
            var target = e.target;

            while (target.nodeName !== 'ARTICLE' && target.nodeName !== 'BUTTON' && target !== document) {
              target = target.parentNode;
            }

            if (target === document) {
              return;
            }

            if (target.id === NEXT_BTN) {
              this.config.page++;
              if (this.urlRequest) {
                this.urlRequest();
              }
              return;
            }

            target.classList.toggle(SAVED);
            this.toggleSavedImage(target, target.querySelector('img'));
          }
        }, {
          key: 'toggleSavedImage',
          value: function toggleSavedImage(imageCard, selectedImage) {
            if (imageCard.classList.contains(SAVED)) {
              this.savedImages.push(selectedImage.src);
            } else {
              this.removeSavedImage(selectedImage.src);
            }
            this.setSavedImages();
          }
        }, {
          key: 'removeSavedImage',
          value: function removeSavedImage(selectedImage) {
            for (var i = 0; i < this.savedImages.length; i++) {
              var image = this.savedImages[i];
              if (selectedImage === image) {
                this.savedImages.splice(i, 1);
                break;
              }
            }
          }
        }, {
          key: 'setSavedImages',
          value: function setSavedImages() {
            localStorage.removeItem('savedImages');
            localStorage.setItem('savedImages', JSON.stringify(this.savedImages));
          }
        }, {
          key: 'savedImage',
          value: function savedImage(imageSrc) {
            var result = false;

            for (var i = 0; i < this.savedImages.length; i++) {
              var savedImage = this.savedImages[i];
              if (imageSrc === savedImage) {
                result = true;
                break;
              }
            }
            return result;
          }
        }]);

        return DisplayImages;
      }();

      _export('default', DisplayImages);
    }
  };
});
'use strict';

System.register('javascript/main', ['./api', './display-images', './page-loader', './search'], function (_export, _context) {
  var API, DisplayImages, PageLoader, Search, KEY, AMOUNT, CONFIG, imageContainer, searchBar, URI, displayImages, lastAPICall, urlRequest, renderSavedImages;
  return {
    setters: [function (_api) {
      API = _api.default;
    }, function (_displayImages) {
      DisplayImages = _displayImages.default;
    }, function (_pageLoader) {
      PageLoader = _pageLoader.default;
    }, function (_search) {
      Search = _search.default;
    }],
    execute: function () {
      KEY = '7677e20284c7594041992c9bdd391d8a';
      AMOUNT = 24;
      CONFIG = {
        page: 1
      };
      imageContainer = document.querySelector('[data-image-container]');

      searchBar = function searchBar() {
        return Search.searchBar().value;
      };

      URI = function URI() {
        return 'https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=' + KEY + '&text=' + searchBar() + '&per_page=' + AMOUNT + '&page=' + CONFIG.page + '&content_type=1&format=json&nojsoncallback=1';
      };

      displayImages = new DisplayImages(imageContainer, CONFIG);
      lastAPICall = null;

      urlRequest = function urlRequest() {
        if (searchBar().length < 3) {
          return;
        }
        lastAPICall = new API(URI(), displayImages.render.bind(displayImages), imageContainer);
      };

      displayImages.urlRequest = urlRequest;

      urlRequest();

      renderSavedImages = function renderSavedImages() {
        lastAPICall.clearUI(imageContainer);
        displayImages.renderSaved(lastAPICall.requestComplete);
      };

      new PageLoader([{ page: 'index', callback: urlRequest }, { page: 'saved', callback: renderSavedImages }]);

      new Search(urlRequest, CONFIG);
    }
  };
});
'use strict';

System.register('javascript/page-loader', [], function (_export, _context) {
  var _createClass, DEFAULT_NAV, LAYOUT, DRAWER, PageLoader;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  return {
    setters: [],
    execute: function () {
      _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      DEFAULT_NAV = document.querySelectorAll('[data-nav]');
      LAYOUT = document.querySelector('[data-mdl-layout]');
      DRAWER = document.querySelector('[data-drawer]');

      PageLoader = function () {
        function PageLoader(pageCallbacks) {
          var navigations = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_NAV : arguments[1];

          _classCallCheck(this, PageLoader);

          this.pageCallbacks = pageCallbacks;
          this.bindEvents(navigations);
        }

        _createClass(PageLoader, [{
          key: 'bindEvents',
          value: function bindEvents(navigations) {
            var _this = this;

            for (var i = 0, navigationsLength = navigations.length; i < navigationsLength; i++) {
              navigations[i].addEventListener('click', function (e) {
                return _this.pageEventHandler(e);
              });
            }
          }
        }, {
          key: 'pageEventHandler',
          value: function pageEventHandler(e) {
            var target = e.target;
            if (!target) {
              return;
            }

            var DATA_ATTRIBUTE = 'data-page';

            if (target.nodeName === 'SPAN' || target.nodeName === 'I') {
              target = target.parentNode;
            }

            if (target.nodeName === "A" && target.hasAttribute(DATA_ATTRIBUTE)) {
              this.loadPage(target.getAttribute(DATA_ATTRIBUTE));
            }
            e.preventDefault();
          }
        }, {
          key: 'loadPage',
          value: function loadPage(page) {
            if (LAYOUT && DRAWER && DRAWER.classList.contains('is-visible')) {
              LAYOUT.MaterialLayout.toggleDrawer();
            }

            for (var i = 0, pageCallbacksLength = this.pageCallbacks.length; i < pageCallbacksLength; i++) {
              var callbackOption = this.pageCallbacks[i];
              if (callbackOption.page === page) {
                callbackOption.callback();
              }
            }
          }
        }]);

        return PageLoader;
      }();

      _export('default', PageLoader);
    }
  };
});
'use strict';

System.register('javascript/search', [], function (_export, _context) {
  var _createClass, SEARCH, MOBILE_SEARCH, HEADER_ITEMS, HEADER_ROW, DESKTOP_SEARCH, MOBILE_ICON, Search;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  return {
    setters: [],
    execute: function () {
      _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      SEARCH = document.querySelector('[data-search]');
      MOBILE_SEARCH = document.querySelector('[data-mobile-search]');
      HEADER_ITEMS = document.querySelectorAll('[data-header-item]');
      HEADER_ROW = document.querySelector('[data-header-row]');
      DESKTOP_SEARCH = document.querySelector('[data-desktop-search]');
      MOBILE_ICON = MOBILE_SEARCH.querySelector('i');

      Search = function () {
        function Search(request, config) {
          _classCallCheck(this, Search);

          this.config = config;
          this.bindEvents(request);
          this.mobileSearch();
        }

        _createClass(Search, [{
          key: 'bindEvents',
          value: function bindEvents(request) {
            var _this = this;

            var timer = setTimeout;
            SEARCH.addEventListener('keyup', function (e) {
              if (_this.testKey(e)) {
                clearTimeout(timer);
                _this.config.page = 1;
                timer = setTimeout(request, 400);
              }
              e.preventDefault();
            });
          }
        }, {
          key: 'testKey',
          value: function testKey(e) {
            var value = false;
            if (e.key && /[a-z]|[A-Z]|[0-9]/.test(e.key)) {
              value = true;
            } else if (e.keyCode) {
              var keyCode = e.keyCode;
              if (keyCode > 45 && keyCode < 91 || keyCode === 8) {
                value = true;
              }
              value = false;
            }
            return value;
          }
        }, {
          key: 'mobileSearch',
          value: function mobileSearch() {
            MOBILE_SEARCH.addEventListener('click', this.toggleMobileSearch);
          }
        }, {
          key: 'toggleMobileSearch',
          value: function toggleMobileSearch() {
            var toggleDevice = 'add';
            var toggleClass = 'remove';
            var headerPadding = '';
            var iconValue = 'search';

            if (MOBILE_ICON.innerHTML === 'search') {
              toggleDevice = 'remove';
              toggleClass = 'add';
              headerPadding = '16px';
              iconValue = 'cancel';
            }

            MOBILE_ICON.innerHTML = iconValue;
            this.classList[toggleDevice]('mdl-cell--hide-tablet', 'mdl-cell--hide-desktop');

            for (var i = 0; i < HEADER_ITEMS.length; i++) {
              HEADER_ITEMS[i].classList[toggleClass]('hidden');
            }
            document.querySelector('.mdl-layout__drawer-button').classList[toggleClass]('hidden');

            HEADER_ROW.style.paddingLeft = headerPadding;
            DESKTOP_SEARCH.classList[toggleDevice]('mdl-cell--hide-phone', 'desktop');
          }
        }], [{
          key: 'searchBar',
          value: function searchBar() {
            return SEARCH;
          }
        }]);

        return Search;
      }();

      _export('default', Search);
    }
  };
});
//# sourceMappingURL=vendor.min.js.map
