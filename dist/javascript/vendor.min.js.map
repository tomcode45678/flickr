{"version":3,"sources":["vendor.min.js","javascript/display-images.js","javascript/main.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","_createClass","SELECTED","DisplayImages","setters","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","data","this","images","items","imageContainer","document","querySelector","savedImages","JSON","parse","localStorage","getItem","renderAssets","bindEvents","value","assets","imageFragments","createDocumentFragment","assetsLength","asset","appendChild","renderAsset","article","createElement","desc","innerHTML","description","image","savedImage","classList","add","addEventListener","selectedHandler","bind","e","nodeName","toggle","toggleSavedImage","preventDefault","selectedImage","contains","push","src","removeSavedImage","setSavedImages","splice","removeItem","setItem","stringify","result","TAGS","API","loadingSpinner","script","_displayImages","window","dataHandler","remove","onerror","sorryMessage","sorry","createTextNode","body"],"mappings":"AAAA,YAEAA,QAAOC,SAAS,+BAAiC,SAAUC,EAASC,GAGlE,QAASC,GAAgBC,EAAUC,GACjC,KAAMD,YAAoBC,IACxB,KAAM,IAAIC,WAAU,qCAJxB,GAAIC,GAAcC,EAAUC,CAQ5B,QACEC,WACAC,QAAS,WACPJ,EAAe,WACb,QAASK,GAAiBC,EAAQC,GAChC,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,GAAIE,GAAaH,EAAMC,EACvBE,GAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,SAAWF,KAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAIlD,MAAO,UAAUZ,EAAamB,EAAYC,GAGxC,MAFID,IAAYZ,EAAiBP,EAAYqB,UAAWF,GACpDC,GAAab,EAAiBP,EAAaoB,GACxCpB,MC5BXG,EAAW,WAEIC,EAAA,WACnB,QAAAA,GAAakB,GAAMxB,EAAAyB,KAAAnB,GACjBmB,KAAKC,OAASF,EAAKG,MACnBF,KAAKG,eAAiBC,SAASC,cAAc,0BAC7CL,KAAKM,YAAcC,KAAKC,MAAMC,aAAaC,QAAQ,oBAE/CV,KAAKG,iBACPH,KAAKW,aAAaZ,EAAKG,OACvBF,KAAKY,cD2HH,MArFAjC,GAAaE,IACXc,IAAK,eACLkB,MAAO,SCpCFC,GAGX,IAAK,GAFDC,GAAiBX,SAASY,yBAErB7B,EAAI,EAAG8B,EAAeH,EAAO1B,OAAY6B,EAAJ9B,EAAkBA,IAAK,CACnE,GAAI+B,GAAQJ,EAAO3B,EACnB4B,GAAeI,YAAYnB,KAAKoB,YAAYF,IAE9ClB,KAAKG,eAAegB,YAAYJ,MDuC1BpB,IAAK,cACLkB,MAAO,SCrCHK,GACV,GAAIG,GAAUjB,SAASkB,cAAc,WACjCC,EAAOnB,SAASkB,cAAc,MAElCC,GAAKC,UAAYN,EAAMO,WACvB,IAAIC,GAAQH,EAAKlB,cAAc,MAO/B,OALIL,MAAK2B,WAAWD,IAClBA,EAAME,UAAUC,IAAIjD,GAGtByC,EAAQF,YAAYO,GACbL,KDwCD1B,IAAK,aACLkB,MAAO,WCrCbb,KAAKG,eAAe2B,iBAAiB,QAAS9B,KAAK+B,gBAAgBC,KAAKhC,UDyClEL,IAAK,kBACLkB,MAAO,SCvCCoB,GACd,GAAIhD,GAASgD,EAAEhD,MAES,SAApBA,EAAOiD,WACTjD,EAAO2C,UAAUO,OAAOvD,GACxBoB,KAAKoC,iBAAiBnD,IAExBgD,EAAEI,oBD0CI1C,IAAK,mBACLkB,MAAO,SCxCEyB,GACXA,EAAcV,UAAUW,SAAS3D,GACnCoB,KAAKM,YAAYkC,KAAKF,EAAcG,KAGpCzC,KAAK0C,iBAAiBJ,EAAcG,KAEtCzC,KAAK2C,oBD0CChD,IAAK,mBACLkB,MAAO,SCxCEyB,GACf,IAAK,GAAInD,GAAI,EAAGA,EAAIa,KAAKM,YAAYlB,OAAQD,IAAK,CAChD,GAAIuC,GAAQ1B,KAAKM,YAAYnB,EACzBmD,KAAkBZ,GACpB1B,KAAKM,YAAYsC,OAAOzD,EAAG,OD6CzBQ,IAAK,iBACLkB,MAAO,WCxCbJ,aAAaoC,WAAW,eACxBpC,aAAaqC,QAAQ,cAAevC,KAAKwC,UAAU/C,KAAKM,iBD4ClDX,IAAK,aACLkB,MAAO,QAASc,GC1CbD,GAGT,IAAK,GAFDsB,IAAS,EAEJ7D,EAAI,EAAGA,EAAIa,KAAKM,YAAYlB,OAAQD,IAAK,CAChD,GAAIwC,GAAa3B,KAAKM,YAAYnB,EAClC,IAAIuC,EAAMe,MAAQd,EAAY,CAC5BqB,GAAS,CACT,QAGJ,MAAOA,OD8CInE,KAGTR,EAAQ,UCtIOQ,OD4IrBV,OAAOC,SAAS,mBAAoB,oBAAqB,SAAUC,EAASC,GAC1E,GAAIO,GAAeoE,EAAMC,EAAKC,EAAgBC,CAC9C,QACEtE,SAAU,SAAUuE,GEjJjBxE,EAAAwE,EAAAA,aFoJHtE,QAAS,WElJPkE,EAAO,SACPC,EAAA,oGAA0GD,EAC1GE,EAAiB/C,SAASC,cAAc,0BAE9CiD,OAAOC,YAAc,SAAUxD,GAC7B,GAAIlB,GAAckB,GAClBoD,EAAevB,UAAU4B,OAAO,kBAG9BJ,EAAShD,SAASkB,cAAc,UACpC8B,EAAOX,IAAMS,EAEbE,EAAOK,QAAU,WACf,GAAIC,GAAetD,SAASkB,cAAc,OACtCqC,EAAQvD,SAASwD,eAAT,+KAKZF,GAAavC,YAAYwC,GACzBvD,SAASyD,KAAK1C,YAAYuC,GAC1BP,EAAevB,UAAU4B,OAAO,kBAGlCpD,SAASyD,KAAK1C,YAAYiC","file":"vendor.min.js","sourcesContent":["'use strict';\n\nSystem.register('javascript/display-images', [], function (_export, _context) {\n  var _createClass, SELECTED, DisplayImages;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  return {\n    setters: [],\n    execute: function () {\n      _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      SELECTED = 'selected';\n\n      DisplayImages = function () {\n        function DisplayImages(data) {\n          _classCallCheck(this, DisplayImages);\n\n          this.images = data.items;\n          this.imageContainer = document.querySelector('[data-image-container]');\n          this.savedImages = JSON.parse(localStorage.getItem('savedImages')) || [];\n\n          if (this.imageContainer) {\n            this.renderAssets(data.items);\n            this.bindEvents();\n          }\n        }\n\n        _createClass(DisplayImages, [{\n          key: 'renderAssets',\n          value: function renderAssets(assets) {\n            var imageFragments = document.createDocumentFragment();\n\n            for (var i = 0, assetsLength = assets.length; i < assetsLength; i++) {\n              var asset = assets[i];\n              imageFragments.appendChild(this.renderAsset(asset));\n            }\n            this.imageContainer.appendChild(imageFragments);\n          }\n        }, {\n          key: 'renderAsset',\n          value: function renderAsset(asset) {\n            var article = document.createElement('article');\n            var desc = document.createElement('div');\n\n            desc.innerHTML = asset.description;\n            var image = desc.querySelector('img');\n\n            if (this.savedImage(image)) {\n              image.classList.add(SELECTED);\n            }\n\n            article.appendChild(image);\n            return article;\n          }\n        }, {\n          key: 'bindEvents',\n          value: function bindEvents() {\n            this.imageContainer.addEventListener('click', this.selectedHandler.bind(this));\n          }\n        }, {\n          key: 'selectedHandler',\n          value: function selectedHandler(e) {\n            var target = e.target;\n\n            if (target.nodeName === \"IMG\") {\n              target.classList.toggle(SELECTED);\n              this.toggleSavedImage(target);\n            }\n            e.preventDefault();\n          }\n        }, {\n          key: 'toggleSavedImage',\n          value: function toggleSavedImage(selectedImage) {\n            if (selectedImage.classList.contains(SELECTED)) {\n              this.savedImages.push(selectedImage.src);\n            } else {\n              this.removeSavedImage(selectedImage.src);\n            }\n            this.setSavedImages();\n          }\n        }, {\n          key: 'removeSavedImage',\n          value: function removeSavedImage(selectedImage) {\n            for (var i = 0; i < this.savedImages.length; i++) {\n              var image = this.savedImages[i];\n              if (selectedImage === image) {\n                this.savedImages.splice(i, 1);\n              }\n            }\n          }\n        }, {\n          key: 'setSavedImages',\n          value: function setSavedImages() {\n            localStorage.removeItem('savedImages');\n            localStorage.setItem('savedImages', JSON.stringify(this.savedImages));\n          }\n        }, {\n          key: 'savedImage',\n          value: function savedImage(image) {\n            var result = false;\n\n            for (var i = 0; i < this.savedImages.length; i++) {\n              var savedImage = this.savedImages[i];\n              if (image.src === savedImage) {\n                result = true;\n                break;\n              }\n            }\n            return result;\n          }\n        }]);\n\n        return DisplayImages;\n      }();\n\n      _export('default', DisplayImages);\n    }\n  };\n});\n'use strict';\n\nSystem.register('javascript/main', ['./display-images'], function (_export, _context) {\n  var DisplayImages, TAGS, API, loadingSpinner, script;\n  return {\n    setters: [function (_displayImages) {\n      DisplayImages = _displayImages.default;\n    }],\n    execute: function () {\n      TAGS = 'london';\n      API = 'http://api.flickr.com/services/feeds/photos_public.gne?format=json&jsoncallback=dataHandler&tags=' + TAGS;\n      loadingSpinner = document.querySelector('[data-loading-spinner]');\n\n\n      window.dataHandler = function (data) {\n        new DisplayImages(data);\n        loadingSpinner.classList.remove('spinner--show');\n      };\n\n      script = document.createElement('script');\n\n      script.src = API;\n\n      script.onerror = function () {\n        var sorryMessage = document.createElement('div');\n        var sorry = document.createTextNode('\\n    We\\'re sorry, we could not retrieve any images from Flickr.\\n    This is most likely connectivity issues, please make sure you are still connected to the internet.\\n  ');\n\n        sorryMessage.appendChild(sorry);\n        document.body.appendChild(sorryMessage);\n        loadingSpinner.classList.remove('spinner--show');\n      };\n\n      document.body.appendChild(script);\n    }\n  };\n});","const SELECTED = 'selected';\n\nexport default class DisplayImages {\n  constructor (data) {\n    this.images = data.items;\n    this.imageContainer = document.querySelector('[data-image-container]');\n    this.savedImages = JSON.parse(localStorage.getItem('savedImages')) || [];\n\n    if (this.imageContainer) {\n      this.renderAssets(data.items);\n      this.bindEvents();\n    }\n  }\n\n  renderAssets(assets) {\n    let imageFragments = document.createDocumentFragment();\n\n    for (let i = 0, assetsLength = assets.length; i < assetsLength; i++) {\n      let asset = assets[i];\n      imageFragments.appendChild(this.renderAsset(asset));\n    }\n    this.imageContainer.appendChild(imageFragments);\n  }\n\n  renderAsset(asset) {\n    let article = document.createElement('article');\n    let desc = document.createElement('div');\n\n    desc.innerHTML = asset.description;\n    let image = desc.querySelector('img');\n\n    if (this.savedImage(image)) {\n      image.classList.add(SELECTED);\n    }\n\n    article.appendChild(image);\n    return article;\n  }\n\n  bindEvents() {\n    this.imageContainer.addEventListener('click', this.selectedHandler.bind(this));\n  }\n\n  selectedHandler(e) {\n    let target = e.target;\n\n    if (target.nodeName === \"IMG\") {\n      target.classList.toggle(SELECTED);\n      this.toggleSavedImage(target);\n    }\n    e.preventDefault();\n  }\n\n  toggleSavedImage(selectedImage) {\n    if (selectedImage.classList.contains(SELECTED)) {\n      this.savedImages.push(selectedImage.src);\n    }\n    else {\n      this.removeSavedImage(selectedImage.src);\n    }\n    this.setSavedImages();\n  }\n\n  removeSavedImage(selectedImage) {\n    for (let i = 0; i < this.savedImages.length; i++) {\n      let image = this.savedImages[i];\n      if (selectedImage === image) {\n        this.savedImages.splice(i, 1);\n      }\n    }\n  }\n\n  setSavedImages() {\n    localStorage.removeItem('savedImages');\n    localStorage.setItem('savedImages', JSON.stringify(this.savedImages));\n  }\n\n  savedImage(image) {\n    let result = false;\n\n    for (let i = 0; i < this.savedImages.length; i++) {\n      let savedImage = this.savedImages[i];\n      if (image.src === savedImage) {\n        result = true;\n        break;\n      }\n    }\n    return result;\n  }\n}\n","import DisplayImages from './display-images';\n\nconst TAGS = 'london';\nconst API = `http://api.flickr.com/services/feeds/photos_public.gne?format=json&jsoncallback=dataHandler&tags=${TAGS}`;\nconst loadingSpinner = document.querySelector('[data-loading-spinner]');\n\nwindow.dataHandler = function (data) {\n  new DisplayImages(data);\n  loadingSpinner.classList.remove('spinner--show');\n};\n\nlet script = document.createElement('script');\nscript.src = API;\n\nscript.onerror = function () {\n  let sorryMessage = document.createElement('div');\n  let sorry = document.createTextNode(`\n    We're sorry, we could not retrieve any images from Flickr.\n    This is most likely connectivity issues, please make sure you are still connected to the internet.\n  `);\n\n  sorryMessage.appendChild(sorry);\n  document.body.appendChild(sorryMessage);\n  loadingSpinner.classList.remove('spinner--show');\n};\n\ndocument.body.appendChild(script);\n"],"sourceRoot":"/source/"}