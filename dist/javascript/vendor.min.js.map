{"version":3,"sources":["vendor.min.js","javascript/api.js","javascript/display-images.js","javascript/main.js","javascript/page-loader.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","_createClass","loadingSpinner","requestComplete","API","setters","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","document","querySelector","classList","remove","url","callback","dataHandler","clearContent","this","setHandler","loadUrl","value","window","data","add","innerHTML","script","createElement","src","clearUI","onerror","sorryMessage","sorry","createTextNode","appendChild","body","_typeof","SAVED","DisplayImages","Symbol","iterator","obj","constructor","imageContainer","savedImages","JSON","parse","localStorage","getItem","images","items","renderAssets","bindEvents","assets","imageFragments","createDocumentFragment","assetsLength","asset","renderAsset","imageCardClass","imageCard","imageSrc","image","desc","description","savedImage","className","imageCardActions","imageCardTitle","title","imageTitle","imageCardSaved","addEventListener","selectedHandler","bind","e","nodeName","parentNode","toggle","toggleSavedImage","selectedImage","contains","push","removeSavedImage","setSavedImages","splice","removeItem","setItem","stringify","result","PageLoader","TAGS","URL_PATH","lastAPICall","urlRequest","renderSavedImages","_api","_displayImages","_pageLoader","displayImages","renderSaved","page","DEFAULT_NAV","LAYOUT","DRAWER","querySelectorAll","pageCallbacks","navigations","arguments","undefined","navigationsLength","pageEventHandler","DATA_ATTRIBUTE","hasAttribute","loadPage","getAttribute","preventDefault","MaterialLayout","toggleDrawer","pageCallbacksLength","callbackOption"],"mappings":"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","file":"vendor.min.js","sourcesContent":["'use strict';\n\nSystem.register('javascript/api', [], function (_export, _context) {\n  var _createClass, loadingSpinner, requestComplete, API;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  return {\n    setters: [],\n    execute: function () {\n      _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      loadingSpinner = document.querySelector('[data-loading-spinner]');\n\n      requestComplete = function requestComplete() {\n        return loadingSpinner.classList.remove('spinner--show');\n      };\n\n      API = function () {\n        function API(url, callback, dataHandler, clearContent) {\n          _classCallCheck(this, API);\n\n          this.setHandler(callback, dataHandler);\n          this.loadUrl(url, clearContent);\n          this.requestComplete = requestComplete;\n        }\n\n        _createClass(API, [{\n          key: 'setHandler',\n          value: function setHandler(callback, dataHandler) {\n            window[callback] = function (data) {\n              new dataHandler(data);\n              requestComplete();\n            };\n          }\n        }, {\n          key: 'clearUI',\n          value: function clearUI(clearContent) {\n            loadingSpinner.classList.add(\"spinner--show\");\n            if (clearContent) {\n              clearContent.innerHTML = '';\n            }\n          }\n        }, {\n          key: 'loadUrl',\n          value: function loadUrl(url, clearContent) {\n            var script = document.createElement('script');\n            script.src = url;\n            this.clearUI(clearContent);\n\n            script.onerror = function () {\n              var sorryMessage = document.createElement('div');\n              var sorry = document.createTextNode('\\n        We\\'re sorry, we could not retrieve any images from Flickr.\\n        This is most likely connectivity issues, please make sure you are still connected to the internet.\\n      ');\n\n              sorryMessage.appendChild(sorry);\n              document.body.appendChild(sorryMessage);\n              requestComplete();\n            };\n\n            document.body.appendChild(script);\n          }\n        }]);\n\n        return API;\n      }();\n\n      _export('default', API);\n    }\n  };\n});\n'use strict';\n\nSystem.register('javascript/display-images', [], function (_export, _context) {\n  var _typeof, _createClass, SAVED, DisplayImages;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  return {\n    setters: [],\n    execute: function () {\n      _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n      };\n\n      _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      SAVED = 'saved';\n\n      DisplayImages = function () {\n        function DisplayImages(data) {\n          _classCallCheck(this, DisplayImages);\n\n          this.imageContainer = document.querySelector('[data-image-container]');\n          this.savedImages = JSON.parse(localStorage.getItem('savedImages')) || [];\n\n          if (this.imageContainer && data) {\n            this.images = data.items;\n            this.renderAssets(data.items);\n            this.bindEvents();\n          }\n        }\n\n        _createClass(DisplayImages, [{\n          key: 'renderAssets',\n          value: function renderAssets(assets) {\n            var imageFragments = document.createDocumentFragment();\n\n            for (var i = 0, assetsLength = assets.length; i < assetsLength; i++) {\n              var asset = assets[i];\n              imageFragments.appendChild(this.renderAsset(asset));\n            }\n            this.imageContainer.appendChild(imageFragments);\n          }\n        }, {\n          key: 'renderAsset',\n          value: function renderAsset(asset) {\n            var imageCardClass = 'mdl-cell mdl-cell--3-col mdl-cell--4-col-tablet mdl-cell--8-col-phone mdl-card mdl-shadow--2dp';\n            var imageCard = document.createElement('article');\n            var imageSrc = asset;\n            var image = null;\n\n            if ((typeof asset === 'undefined' ? 'undefined' : _typeof(asset)) === 'object') {\n              var desc = document.createElement('div');\n              desc.innerHTML = asset.description;\n              image = desc.querySelector('img');\n              imageSrc = image.src;\n            } else {\n              image = document.createElement('img');\n              image.src = imageSrc;\n            }\n\n            if (this.savedImage(imageSrc)) {\n              imageCardClass = imageCardClass + ' ' + SAVED;\n            }\n            imageCard.className = imageCardClass;\n\n            var imageCardActions = document.createElement('div');\n            imageCardActions.className = 'mdl-card__actions';\n\n            var imageCardTitle = document.createElement('div');\n            imageCardTitle.className = 'card-image card-image__title';\n\n            if (asset.title) {\n              var imageTitle = document.createTextNode(asset.title);\n              imageCardTitle.appendChild(imageTitle);\n            }\n\n            var imageCardSaved = document.createElement('div');\n            imageCardSaved.className = 'card-image card-image__saved';\n\n            imageCardSaved.innerHTML = '&#x2665;';\n\n            imageCardActions.appendChild(imageCardTitle);\n            imageCardActions.appendChild(imageCardSaved);\n\n            imageCard.appendChild(image);\n            imageCard.appendChild(imageCardActions);\n            return imageCard;\n          }\n        }, {\n          key: 'bindEvents',\n          value: function bindEvents() {\n            this.imageContainer.addEventListener('click', this.selectedHandler.bind(this));\n          }\n        }, {\n          key: 'selectedHandler',\n          value: function selectedHandler(e) {\n            var target = e.target;\n\n            while (target.nodeName !== \"ARTICLE\" && target !== document) {\n              target = target.parentNode;\n            }\n\n            target.classList.toggle(SAVED);\n            this.toggleSavedImage(target, target.querySelector('img'));\n          }\n        }, {\n          key: 'toggleSavedImage',\n          value: function toggleSavedImage(imageCard, selectedImage) {\n            if (imageCard.classList.contains(SAVED)) {\n              this.savedImages.push(selectedImage.src);\n            } else {\n              this.removeSavedImage(selectedImage.src);\n            }\n            this.setSavedImages();\n          }\n        }, {\n          key: 'removeSavedImage',\n          value: function removeSavedImage(selectedImage) {\n            for (var i = 0; i < this.savedImages.length; i++) {\n              var image = this.savedImages[i];\n              if (selectedImage === image) {\n                this.savedImages.splice(i, 1);\n                break;\n              }\n            }\n          }\n        }, {\n          key: 'setSavedImages',\n          value: function setSavedImages() {\n            localStorage.removeItem('savedImages');\n            localStorage.setItem('savedImages', JSON.stringify(this.savedImages));\n          }\n        }, {\n          key: 'savedImage',\n          value: function savedImage(imageSrc) {\n            var result = false;\n\n            for (var i = 0; i < this.savedImages.length; i++) {\n              var savedImage = this.savedImages[i];\n              if (imageSrc === savedImage) {\n                result = true;\n                break;\n              }\n            }\n            return result;\n          }\n        }, {\n          key: 'renderSaved',\n          value: function renderSaved(callback) {\n            this.renderAssets(this.savedImages);\n            callback();\n          }\n        }]);\n\n        return DisplayImages;\n      }();\n\n      _export('default', DisplayImages);\n    }\n  };\n});\n'use strict';\n\nSystem.register('javascript/main', ['./api', './display-images', './page-loader'], function (_export, _context) {\n  var API, DisplayImages, PageLoader, TAGS, callback, URL_PATH, imageContainer, lastAPICall, urlRequest, renderSavedImages;\n  return {\n    setters: [function (_api) {\n      API = _api.default;\n    }, function (_displayImages) {\n      DisplayImages = _displayImages.default;\n    }, function (_pageLoader) {\n      PageLoader = _pageLoader.default;\n    }],\n    execute: function () {\n      TAGS = 'beautiful landscape';\n      callback = 'dataHandler';\n      URL_PATH = 'http://api.flickr.com/services/feeds/photos_public.gne?format=json&jsoncallback=' + callback + '&tags=' + TAGS;\n      imageContainer = document.querySelector('[data-image-container]');\n      lastAPICall = null;\n\n      urlRequest = function urlRequest() {\n        lastAPICall = new API(URL_PATH, callback, DisplayImages, imageContainer);\n      };\n\n      urlRequest();\n\n      renderSavedImages = function renderSavedImages() {\n        var displayImages = new DisplayImages();\n\n        lastAPICall.clearUI(imageContainer);\n        displayImages.renderSaved(lastAPICall.requestComplete);\n      };\n\n      new PageLoader([{ page: 'index', callback: urlRequest }, { page: 'saved', callback: renderSavedImages }]);\n    }\n  };\n});\n'use strict';\n\nSystem.register('javascript/page-loader', [], function (_export, _context) {\n  var _createClass, DEFAULT_NAV, LAYOUT, DRAWER, PageLoader;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  return {\n    setters: [],\n    execute: function () {\n      _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      DEFAULT_NAV = document.querySelectorAll('[data-nav]');\n      LAYOUT = document.querySelector('[data-mdl-layout]');\n      DRAWER = document.querySelector('[data-drawer]');\n\n      PageLoader = function () {\n        function PageLoader(pageCallbacks) {\n          var navigations = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_NAV : arguments[1];\n\n          _classCallCheck(this, PageLoader);\n\n          this.pageCallbacks = pageCallbacks;\n          this.bindEvents(navigations);\n        }\n\n        _createClass(PageLoader, [{\n          key: 'bindEvents',\n          value: function bindEvents(navigations) {\n            for (var i = 0, navigationsLength = navigations.length; i < navigationsLength; i++) {\n              navigations[i].addEventListener('click', this.pageEventHandler.bind(this));\n            }\n          }\n        }, {\n          key: 'pageEventHandler',\n          value: function pageEventHandler(e) {\n            var target = e.target;\n            if (!target) {\n              return;\n            }\n\n            var DATA_ATTRIBUTE = 'data-page';\n\n            if (target.nodeName === 'SPAN') {\n              target = target.parentNode;\n            }\n\n            if (target.nodeName === \"A\" && target.hasAttribute(DATA_ATTRIBUTE)) {\n              this.loadPage(target.getAttribute(DATA_ATTRIBUTE));\n            }\n            e.preventDefault();\n          }\n        }, {\n          key: 'loadPage',\n          value: function loadPage(page) {\n            if (LAYOUT && DRAWER && DRAWER.classList.contains('is-visible')) {\n              LAYOUT.MaterialLayout.toggleDrawer();\n            }\n\n            for (var i = 0, pageCallbacksLength = this.pageCallbacks.length; i < pageCallbacksLength; i++) {\n              var callbackOption = this.pageCallbacks[i];\n              if (callbackOption.page === page) {\n                callbackOption.callback();\n              }\n            }\n          }\n        }]);\n\n        return PageLoader;\n      }();\n\n      _export('default', PageLoader);\n    }\n  };\n});","const loadingSpinner = document.querySelector('[data-loading-spinner]');\nlet requestComplete = () => loadingSpinner.classList.remove('spinner--show');\n\nexport default class API {\n  constructor (url, callback, dataHandler, clearContent) {\n    this.setHandler(callback, dataHandler);\n    this.loadUrl(url, clearContent);\n    this.requestComplete = requestComplete;\n  }\n\n  setHandler(callback, dataHandler) {\n    window[callback] = function (data) {\n      new dataHandler(data);\n      requestComplete();\n    };\n  }\n\n  clearUI(clearContent) {\n    loadingSpinner.classList.add(\"spinner--show\");\n    if (clearContent) {\n      clearContent.innerHTML = '';\n    }\n  }\n\n  loadUrl(url, clearContent) {\n    let script = document.createElement('script');\n    script.src = url;\n    this.clearUI(clearContent);\n\n    script.onerror = function () {\n      let sorryMessage = document.createElement('div');\n      let sorry = document.createTextNode(`\n        We're sorry, we could not retrieve any images from Flickr.\n        This is most likely connectivity issues, please make sure you are still connected to the internet.\n      `);\n\n      sorryMessage.appendChild(sorry);\n      document.body.appendChild(sorryMessage);\n      requestComplete();\n    };\n\n    document.body.appendChild(script);\n  }\n}\n","const SAVED = 'saved';\n\nexport default class DisplayImages {\n  constructor (data) {\n    this.imageContainer = document.querySelector('[data-image-container]');\n    this.savedImages = JSON.parse(localStorage.getItem('savedImages')) || [];\n\n    if (this.imageContainer && data) {\n      this.images = data.items;\n      this.renderAssets(data.items);\n      this.bindEvents();\n    }\n  }\n\n  renderAssets(assets) {\n    let imageFragments = document.createDocumentFragment();\n\n    for (let i = 0, assetsLength = assets.length; i < assetsLength; i++) {\n      let asset = assets[i];\n      imageFragments.appendChild(this.renderAsset(asset));\n    }\n    this.imageContainer.appendChild(imageFragments);\n  }\n\n  renderAsset(asset) {\n    let imageCardClass = 'mdl-cell mdl-cell--3-col mdl-cell--4-col-tablet mdl-cell--8-col-phone mdl-card mdl-shadow--2dp';\n    let imageCard = document.createElement('article');\n    let imageSrc = asset;\n    let image = null;\n\n    if (typeof asset === 'object') {\n      let desc = document.createElement('div');\n      desc.innerHTML = asset.description;\n      image = desc.querySelector('img')\n      imageSrc = image.src;\n    }\n    else {\n      image = document.createElement('img');\n      image.src = imageSrc;\n    }\n\n    if (this.savedImage(imageSrc)) {\n      imageCardClass = `${imageCardClass} ${SAVED}`;\n    }\n    imageCard.className = imageCardClass;\n\n    let imageCardActions = document.createElement('div');\n    imageCardActions.className = 'mdl-card__actions';\n\n    let imageCardTitle = document.createElement('div');\n    imageCardTitle.className = 'card-image card-image__title';\n\n    if (asset.title) {\n      let imageTitle = document.createTextNode(asset.title);\n      imageCardTitle.appendChild(imageTitle);\n    }\n\n    let imageCardSaved = document.createElement('div');\n    imageCardSaved.className = 'card-image card-image__saved';\n\n    imageCardSaved.innerHTML = '&#x2665;';\n\n    imageCardActions.appendChild(imageCardTitle);\n    imageCardActions.appendChild(imageCardSaved);\n\n    imageCard.appendChild(image);\n    imageCard.appendChild(imageCardActions);\n    return imageCard;\n  }\n\n  bindEvents() {\n    this.imageContainer.addEventListener('click', this.selectedHandler.bind(this));\n  }\n\n  selectedHandler(e) {\n    let target = e.target;\n\n    while (target.nodeName !== \"ARTICLE\" && target !== document) {\n      target = target.parentNode;\n    }\n\n    target.classList.toggle(SAVED);\n    this.toggleSavedImage(target, target.querySelector('img'));\n  }\n\n  toggleSavedImage(imageCard, selectedImage) {\n    if (imageCard.classList.contains(SAVED)) {\n      this.savedImages.push(selectedImage.src);\n    }\n    else {\n      this.removeSavedImage(selectedImage.src);\n    }\n    this.setSavedImages();\n  }\n\n  removeSavedImage(selectedImage) {\n    for (let i = 0; i < this.savedImages.length; i++) {\n      let image = this.savedImages[i];\n      if (selectedImage === image) {\n        this.savedImages.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  setSavedImages() {\n    localStorage.removeItem('savedImages');\n    localStorage.setItem('savedImages', JSON.stringify(this.savedImages));\n  }\n\n  savedImage(imageSrc) {\n    let result = false;\n\n    for (let i = 0; i < this.savedImages.length; i++) {\n      let savedImage = this.savedImages[i];\n      if (imageSrc === savedImage) {\n        result = true;\n        break;\n      }\n    }\n    return result;\n  }\n\n  renderSaved(callback) {\n    this.renderAssets(this.savedImages);\n    callback();\n  }\n}\n","import API from './api';\nimport DisplayImages from './display-images';\nimport PageLoader from './page-loader';\n\nconst TAGS = 'beautiful landscape';\nconst callback = 'dataHandler';\nconst URL_PATH = `http://api.flickr.com/services/feeds/photos_public.gne?format=json&jsoncallback=${callback}&tags=${TAGS}`;\nconst imageContainer = document.querySelector('[data-image-container]');\nlet lastAPICall = null;\n\nlet urlRequest = function () {\n  lastAPICall = new API(URL_PATH, callback, DisplayImages, imageContainer);\n}\n\nurlRequest();\n\nlet renderSavedImages = function () {\n  let displayImages = new DisplayImages();\n\n  lastAPICall.clearUI(imageContainer);\n  displayImages.renderSaved(lastAPICall.requestComplete);\n}\n\nnew PageLoader([\n  { page: 'index', callback: urlRequest },\n  { page: 'saved', callback: renderSavedImages }\n]);\n","const DEFAULT_NAV = document.querySelectorAll('[data-nav]');\nconst LAYOUT = document.querySelector('[data-mdl-layout]');\nconst DRAWER = document.querySelector('[data-drawer]');\n\nexport default class PageLoader {\n  constructor (pageCallbacks, navigations = DEFAULT_NAV) {\n    this.pageCallbacks = pageCallbacks;\n    this.bindEvents(navigations);\n  }\n\n  bindEvents(navigations) {\n    for (let i = 0, navigationsLength = navigations.length; i < navigationsLength; i++) {\n      navigations[i].addEventListener('click', this.pageEventHandler.bind(this));\n    }\n  }\n\n  pageEventHandler(e) {\n    let target = e.target;\n    if (!target) {\n      return;\n    }\n\n    const DATA_ATTRIBUTE = 'data-page';\n\n    if (target.nodeName === 'SPAN') {\n      target = target.parentNode;\n    }\n\n    if (target.nodeName === \"A\" && target.hasAttribute(DATA_ATTRIBUTE)) {\n      this.loadPage(target.getAttribute(DATA_ATTRIBUTE));\n    }\n    e.preventDefault();\n  }\n\n  loadPage(page) {\n    if (LAYOUT && DRAWER && DRAWER.classList.contains('is-visible')) {\n      LAYOUT.MaterialLayout.toggleDrawer();\n    }\n\n    for (let i = 0, pageCallbacksLength = this.pageCallbacks.length; i < pageCallbacksLength; i++) {\n      let callbackOption = this.pageCallbacks[i];\n      if (callbackOption.page === page) {\n        callbackOption.callback();\n      }\n    }\n  }\n}\n"],"sourceRoot":"/source/"}